@page "/login"
@using BlazorExample.Shared
@using BlazorReport.Shared
@inject HttpClient Http
@inject IJSRuntime jsr
@inject NavigationManager nav
@inject AuthService AuthService

<div class="d-flex flex-column justify-content-center align-items-center mt-lg-5">
	<h3 class="text-center mb-4">Login</h3>

	<p class="text-danger text-center">@message</p>

	<EditForm Model="user" OnValidSubmit="OnValid" style="max-width: 400px; width: 100%;">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="mb-3">
			<InputText class="form-control" @bind-Value="user.email" placeholder="Enter Email" />
		</div>
		<div class="mb-3">
			<InputText type="password" class="form-control" @bind-Value="user.password" placeholder="Enter Password" />
		</div>
		<div class="mb-3 text-center">
			<button class="btn btn-primary w-100" disabled="@isDisabled">Login</button>
		</div>
	</EditForm>

	<div class="text-center mt-3">
		<a href="/register" class="text-muted">Don't have an account? Register</a>
	</div>
</div>



@code {
	LoginModel user = new LoginModel();
	string message = string.Empty;
	bool isDisabled = false;

	private async Task OnValid()
	{
		isDisabled = true;
		using (var msg = await Http.PostAsJsonAsync<LoginModel>("/api/auth/login", user, System.Threading.CancellationToken.None))
		{
			if (msg.IsSuccessStatusCode)
			{
				LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
				message = result.message;
				isDisabled = false;

				if (result.success)
					AuthService.Login(result.email);
					await jsr.InvokeVoidAsync("localStorage.setItem", "user", $"{result.email};{result.jwtBearer}").ConfigureAwait(false);
					nav.NavigateTo("/");
			}
		}
	}
}